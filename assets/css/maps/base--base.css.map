{"version":3,"sources":["base/base--base.scss","base/base--base.css","helpers/_media-queries.scss","helpers/_mixins.scss"],"names":[],"mappings":"AAEA,KACI,YAAa,wBACb,YAAa,IACb,UAAW,iBACX,YAAa,KACb,eAAgB,MAChB,MAAO,uBACP,iBAAkB,uBCEtB,IDCA,GAEI,YAAa,MAAG,CAAA,WAChB,YAAW,IACX,UAAW,KACX,YAAO,KACP,MAAM,0BEUR,OAAM,KAAM,EDPd,IADA,GAEE,YEsDmC,2BFrDnC,YAAa,IDEb,UAAA,KACF,YAAI,KACA,MAAA,0BACA,OAAA,KAAa,ECGjB,IADA,GCFE,YAAY,2BDKZ,YDRA,ICSA,UDRE,KCSF,YDDe,KCEf,MDDM,0BCEN,OAAQ,KAAK,EAAE,KAIjB,IADA,GDEI,YAAW,wBACX,YAAa,IACb,UAAO,uBACP,YAAQ,MCCV,MAAO,uBDCP,OAAA,KAAA,ECIF,IAUA,IAXA,GAUA,GDRI,YAAa,wBACb,YAAO,IACP,UAAQ,uBCCV,YAAa,MDCb,MAAA,uBACF,OAAI,KAAA,ECaJ,EDCI,MAAO,uBACP,gBACH,KCAC,cAAe,IAAI,MAAM,YAG3B,QDCI,MAAA,6BAHJ,gBAIY,KCCV,aDAa,6BCGf,QACE,MDCW,uBCAX,gBDCqB,KCArB,aDCkB,YCEpB,EACA,OACE,YAAa,IDGd,MAAQ,uBCMT,QDGA,GCNA,GDAA,ECCA,MDAA,GAKA,OAEM,KACW,ECFjB,MACA,MACE,OAAQ,IAAI,EAcd,GAXA,GDQE,aAAC,KCJH,cDQA,QAAM,QACF,SAAO,SACP,IAAA,EAFJ,KAGI,MCAJ,GDOA,OAAK,IAAL,iBAGI,yBEzGF,MFgHE,MAAG,eCVL,ODWM,IAAS,MAAM,yBCPvB,SADA,SAEE,QDYM,IAAW,KCXjB,ODYM,IAAA,MAAa,yBCXnB,MDYM,uBCTR,kBChHE,qBDoHF,qBAHE,aDaiB,ECLnB,0CAEE,IDeE,GAEI,UAAW,OAEX,YAAA,OAEF,OAAC,KAAA,ECdL,IADA,GAEE,UAAW,OACX,YAAa,OAGf,GACE,UAAW,KACX,YAAa,KACb,OAAQ,KAAK,EAAE,KACf,eAAgB,QAGlB,GACE,UAAW,KACX,YAAa,KACb,OAAQ,KAAK,EAAE,KACf,eAAgB,EAGlB,GACE,UAAW,KACX,YAAa,KACb,OAAQ,KAAK,EAAE,KACf,eAAgB,GAIpB,yCACE,GACE,UAAW,KACX,YAAa,KACb,eAAgB,EAGlB,GACE,UAAW,KACX,YAAa,KACb,eAAgB,QAGlB,GACE,UAAW,KACX,YAAa,KACb,OAAQ,KAAK,EAAE,KACf,eAAgB","file":"../base--base.css","sourcesContent":["@import \"../helpers/_helpers\";\r\n\r\nbody {\r\n    font-family: var(--font-family-base);\r\n    font-weight: 400;\r\n    font-size: var(--font-size);\r\n    line-height: 26px; // line-height 24px / var(--font-size)\r\n    letter-spacing: 0.05em;\r\n    color: var(--color-base-text);\r\n    background-color: var(--background-site);\r\n}\r\nh1,\r\n.h1 {\r\n    font-family: 'Galien', sans-serif;\r\n    font-weight: 700;\r\n    font-size: 64px;\r\n    line-height: 74px;\r\n    color: var(--color-base-heading);\r\n    margin: 32px 0;\r\n    @include max-screen(1024px) {\r\n        font-size: rem(24px);\r\n        line-height: rem(40px);\r\n        margin: rem(32px 0);\r\n    }\r\n}\r\nh2,\r\n.h2 {\r\n    font-family: var(--font-family-heading);\r\n    font-weight: 600;\r\n    font-size: 36px;\r\n    line-height: 46px;\r\n    color: var(--color-base-heading);\r\n    margin: 32px 0;\r\n    @include max-screen(1024px) {\r\n        font-size: rem(24px);\r\n        line-height: rem(40px);\r\n    }\r\n}\r\nh3,\r\n.h3 {\r\n    font-family: var(--font-family-heading);\r\n    font-weight: 600;\r\n    font-size: 20px;\r\n    line-height: 32px;\r\n    color: var(--color-base-heading);\r\n    margin: 32px 0 16px;\r\n}\r\nh4,\r\n.h4 {\r\n    font-family: var(--font-family-base);\r\n    font-weight: 600;\r\n    font-size: var(--font-size-norma);\r\n    line-height: 1.428;\r\n    color: var(--color-base-text);\r\n    margin: 16px 0;\r\n}\r\nh5,\r\n.h5 {\r\n    font-family: var(--font-family-base);\r\n    font-weight: 400;\r\n    font-size: var(--font-size-norma);\r\n    line-height: 1.428;\r\n    color: var(--color-base-text);\r\n    margin: 16px 0;\r\n}\r\nh6,\r\n.h6 {\r\n    font-family: var(--font-family-base);\r\n    font-weight: 400;\r\n    font-size: var(--font-size-norma);\r\n    line-height: 1.428;\r\n    color: var(--color-base-text);\r\n    margin: 16px 0;\r\n}\r\na {\r\n    color: var(--color-base-link);\r\n    text-decoration: none;\r\n    border-bottom: 1px solid transparent;\r\n    &:hover {\r\n        color: var(--color-base-link-hover);\r\n        text-decoration: none;\r\n        border-color: var(--color-base-link-hover);\r\n    }\r\n    &:focus {\r\n        color: var(--color-base-link);\r\n        text-decoration: none;\r\n        border-color: transparent;\r\n    }\r\n}\r\nb, strong {\r\n    font-weight: 700;\r\n    color: var(--color-base-text);\r\n}\r\np, ul, ol, table, hr, .ck-tpl {\r\n    margin: 16px 0;\r\n}\r\nol,\r\nul {\r\n    li {\r\n        margin: 8px 0;\r\n    }\r\n}\r\nul {\r\n    padding-left: 32px;\r\n    li {\r\n        &::before {\r\n            content: \"\\2022\";\r\n            position: absolute;\r\n            top: 0;\r\n            left: -16px;\r\n        }\r\n    }\r\n}\r\nol {\r\n    padding-left: 32px;\r\n}\r\nhr {\r\n    height: 1px;\r\n    background-color: var(--color-base-border);\r\n}\r\ntable {\r\n    width: 100% !important;\r\n    border: 1px solid var(--color-base-border);\r\n    th,\r\n    td {\r\n        padding: 8px 16px;\r\n        border: 1px solid var(--color-base-border);\r\n        color: var(--color-base-text); // не обязательно\r\n    }\r\n}\r\ntable[border=\"0\"] {\r\n    border-width: 0;\r\n    th,\r\n    td {\r\n        border-width: 0;\r\n    }\r\n}\r\n\r\n@include max-screen(1280px) {}\r\n@include max-screen(1024px) {\r\n    h1 {\r\n        font-size: 32px;\r\n        line-height: 48px;\r\n        margin: 28px 0 16px;\r\n        letter-spacing: 0.0025em; // не обязательный\r\n    }\r\n    h2 {\r\n        font-size: 24px;\r\n        line-height: 32px;\r\n        margin: 32px 0 16px;\r\n        letter-spacing: 0;\r\n    }\r\n    h3 {\r\n        font-size: 24px;\r\n        line-height: 32px;\r\n        margin: 32px 0 24px;\r\n        letter-spacing: 0;\r\n    }\r\n}\r\n@include max-screen(768px) {\r\n    h1 {\r\n        font-size: 24px;\r\n        line-height: 32px;\r\n        //margin: 48px 0 16px;\r\n        letter-spacing: 0; // не обязательный\r\n    }\r\n    h2 {\r\n        font-size: 20px;\r\n        line-height: 28px;\r\n        //margin: 32px 0 16px;\r\n        letter-spacing: 0.0015em;\r\n    }\r\n    h3 {\r\n        font-size: 20px;\r\n        line-height: 28px;\r\n        margin: 32px 0 16px;\r\n        letter-spacing: 0.0015em;\r\n    }\r\n}\r\n",null,"//  Author: Rafal Bromirski\r\n//  www: http://rafalbromirski.com/\r\n//  github: http://github.com/paranoida/sass-mediaqueries\r\n//\r\n//  Licensed under a MIT License\r\n//\r\n//  Version:\r\n//  1.6.1\r\n\r\n// --- generator ---------------------------------------------------------------\r\n\r\n@mixin mq($args...) {\r\n  $media-type: 'only screen';\r\n  $media-type-key: 'media-type';\r\n  $args: keywords($args);\r\n  $expr: '';\r\n\r\n  @if map-has-key($args, $media-type-key) {\r\n    $media-type: map-get($args, $media-type-key);\r\n    $args: map-remove($args, $media-type-key);\r\n  }\r\n\r\n  @each $key, $value in $args {\r\n    @if $value {\r\n      $expr: \"#{$expr} and (#{$key}: #{$value})\";\r\n    }\r\n  }\r\n\r\n  @media #{$media-type} #{$expr} {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- screen ------------------------------------------------------------------\r\n\r\n@mixin screen($min, $max, $orientation: false) {\r\n  @include mq($min-width: $min, $max-width: $max, $orientation: $orientation) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin max-screen($max) {\r\n  @include mq($max-width: $max) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin min-screen($min) {\r\n  @include mq($min-width: $min) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin screen-height($min, $max, $orientation: false) {\r\n  @include mq($min-height: $min, $max-height: $max, $orientation: $orientation) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin max-screen-height($max) {\r\n  @include mq($max-height: $max) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin min-screen-height($min) {\r\n  @include mq($min-height: $min) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- hdpi --------------------------------------------------------------------\r\n\r\n@mixin hdpi($ratio: 1.3) {\r\n  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),\r\n  only screen and (min-resolution: #{round($ratio*96)}dpi) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- hdtv --------------------------------------------------------------------\r\n\r\n@mixin hdtv($standard: '1080') {\r\n  $min-width: false;\r\n  $min-height: false;\r\n\r\n  $standards: ('720p', 1280px, 720px)\r\n              ('1080', 1920px, 1080px)\r\n              ('2K', 2048px, 1080px)\r\n              ('4K', 4096px, 2160px);\r\n\r\n  @each $s in $standards {\r\n    @if $standard == nth($s, 1) {\r\n      $min-width: nth($s, 2);\r\n      $min-height: nth($s, 3);\r\n    }\r\n  }\r\n\r\n  @include mq(\r\n    $min-device-width: $min-width,\r\n    $min-device-height: $min-height,\r\n    $min-width: $min-width,\r\n    $min-height: $min-height\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone4 -----------------------------------------------------------------\r\n\r\n@mixin iphone4($orientation: false) {\r\n  $min: 320px;\r\n  $max: 480px;\r\n  $pixel-ratio: 2;\r\n  $aspect-ratio: '2/3';\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $device-aspect-ratio: $aspect-ratio,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone5 -----------------------------------------------------------------\r\n\r\n@mixin iphone5($orientation: false) {\r\n  $min: 320px;\r\n  $max: 568px;\r\n  $pixel-ratio: 2;\r\n  $aspect-ratio: '40/71';\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $device-aspect-ratio: $aspect-ratio,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone6 -----------------------------------------------------------------\r\n\r\n@mixin iphone6($orientation: false) {\r\n  $min: 375px;\r\n  $max: 667px;\r\n  $pixel-ratio: 2;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone6 plus ------------------------------------------------------------\r\n\r\n@mixin iphone6-plus($orientation: false) {\r\n  $min: 414px;\r\n  $max: 736px;\r\n  $pixel-ratio: 3;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- ipad (all) --------------------------------------------------------------\r\n\r\n@mixin ipad($orientation: false) {\r\n  $min: 768px;\r\n  $max: 1024px;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- ipad-retina -------------------------------------------------------------\r\n\r\n@mixin ipad-retina($orientation: false) {\r\n  $min: 768px;\r\n  $max: 1024px;\r\n  $pixel-ratio: 2;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- orientation -------------------------------------------------------------\r\n\r\n@mixin landscape() {\r\n  @include mq($orientation: landscape) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin portrait() {\r\n  @include mq($orientation: portrait) {\r\n    @content;\r\n  }\r\n}\r\n","@mixin font-mixin ($family, $map) {\r\n    $main-path: \"../fonts/\";\r\n    $dir-name: $family;\r\n    @each $weight, $path in $map {\r\n        @font-face {\r\n            font-display: swap;\r\n            font-family: $family;\r\n            src: url(\"#{$main-path + $dir-name + $path}.eot\");\r\n            src: url(\"#{$main-path + $dir-name +  $path}.eot?#iefix\") format(\"embedded-opentype\"),\r\n            url(\"#{$main-path + $dir-name + $path}.woff\") format(\"woff\"),\r\n            url(\"#{$main-path + $dir-name + $path}.ttf\")  format(\"truetype\"),\r\n            url(\"#{$main-path + $dir-name + $path}.svg##{$family}\")  format(\"svg\");\r\n            font-style: normal;\r\n            font-weight: $weight;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin placeholder() {\r\n    &::-webkit-input-placeholder {@content;}\r\n    &::-moz-placeholder {@content;}\r\n    &:-moz-placeholder {@content;}\r\n    &:-ms-input-placeholder {@content;}\r\n}\r\n\r\n@mixin fontAwesome($code: \"\", $size: inherit, $weight: 100) {\r\n    content: $code;\r\n    font-family: \"Font Awesome 5 Pro\";\r\n    font-size: $size;\r\n    font-weight: $weight;\r\n    line-height: 1;\r\n}\r\n\r\n@mixin icomoon($code: \"\", $size: inherit, $weight: 100) {\r\n    content: $code;\r\n    font-family: \"icomoon\";\r\n    font-size: $size;\r\n    font-weight: $weight;\r\n    line-height: 1;\r\n}\r\n\r\n// REM CONVERT\r\n$rem-baseline: 16px !default;\r\n$rem-fallback: false !default;\r\n$rem-px-only: false !default;\r\n\r\n@function rem-separator($list, $separator: false) {\r\n    @if $separator == \"comma\" or $separator == \"space\" {\r\n        @return append($list, null, $separator);\r\n    }\r\n\r\n    @if function-exists(\"list-separator\") == true {\r\n        @return list-separator($list);\r\n    }\r\n\r\n    // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\r\n    $test-list: ();\r\n    @each $item in $list {\r\n        $test-list: append($test-list, $item, space);\r\n    }\r\n\r\n    @return if($test-list == $list, space, comma);\r\n}\r\n\r\n@mixin rem-baseline($zoom: 100%) {\r\n    font-size: $zoom / 16px * $rem-baseline;\r\n}\r\n\r\n@function rem-convert($to, $values...) {\r\n    $result: ();\r\n    $separator: rem-separator($values);\r\n\r\n    @each $value in $values {\r\n        @if type-of($value) == \"number\" and unit($value) == \"rem\" and $to == \"px\" {\r\n            $result: append($result, $value / 1rem * $rem-baseline, $separator);\r\n        } @else if type-of($value) == \"number\" and unit($value) == \"px\" and $to == \"rem\" {\r\n            $result: append($result, $value / $rem-baseline * 1rem, $separator);\r\n        } @else if type-of($value) == \"list\" {\r\n            $value-separator: rem-separator($value);\r\n            $value: rem-convert($to, $value...);\r\n            $value: rem-separator($value, $value-separator);\r\n            $result: append($result, $value, $separator);\r\n        } @else {\r\n            $result: append($result, $value, $separator);\r\n        }\r\n    }\r\n\r\n    @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n\r\n@function rem($values...) {\r\n    @if $rem-px-only {\r\n        @return rem-convert(px, $values...);\r\n    } @else {\r\n        @return rem-convert(rem, $values...);\r\n    }\r\n}\r\n\r\n@mixin rem($properties, $values...) {\r\n    @if type-of($properties) == \"map\" {\r\n        @each $property in map-keys($properties) {\r\n            @include rem($property, map-get($properties, $property));\r\n        }\r\n    } @else {\r\n        @each $property in $properties {\r\n            @if $rem-fallback or $rem-px-only {\r\n                #{$property}: rem-convert(px, $values...);\r\n            }\r\n            @if not $rem-px-only {\r\n                #{$property}: rem-convert(rem, $values...);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// EM CONVERT\r\n// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\r\n@function em-separator($list) {\r\n    @if function-exists(\"list-separator\") == true {\r\n        @return list-separator($list);\r\n    }\r\n\r\n    $test-list: ();\r\n    @each $item in $list {\r\n        $test-list: append($test-list, $item, space);\r\n    }\r\n\r\n    @return if($test-list == $list, space, comma);\r\n}\r\n@function em($values...) {\r\n    $context: nth($values, length($values));\r\n    $result: ();\r\n    $separator: em-separator($values);\r\n\r\n    @for $i from 1 through length($values) - 1 {\r\n        $value: nth($values, $i);\r\n        @if type-of($value) == \"number\" and unit($value) == \"px\" {\r\n            $result: append($result, $value / $context * 1em, $separator);\r\n        } @else if type-of($value) == \"list\" {\r\n            $result: append($result, em(append($value, $context)...), $separator);\r\n        } @else {\r\n            $result: append($result, $value, $separator);\r\n        }\r\n    }\r\n\r\n    @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n@mixin em($properties, $context) {\r\n    @each $property in map-keys($properties) {\r\n        #{$property}: em(append(map-get($properties, $property), $context)...);\r\n    }\r\n}"]}