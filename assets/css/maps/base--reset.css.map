{"version":3,"sources":["base/base--reset.scss","base/base--reset.css","helpers/_mixins.scss"],"names":[],"mappings":"AAEA,EAEA,OADA,QAEI,WAAY,QCChB,KDGI,UAAA,KACA,gBAAY,OCDd,WAAY,WAGd,KDGI,eAAU,mBACV,OAAA,EACA,QAAS,ECDX,WAAY,MDId,UAAI,MAGJ,IACI,YAAW,SCAf,ODEA,MAAC,KCED,EACE,QAAS,EAGX,SACE,QAAS,EAGX,QACE,QAAS,EAGX,kBACA,kBDWA,WAAI,ECPJ,2BDWA,2BACI,cAAY,EAGhB,MACI,WAAW,KACX,SAAA,SCPJ,IACE,UDUM,KCTN,OAAQ,KAGV,GACE,YDQF,MAAA,KCJA,MACE,MDYU,KCXV,gBDYuB,SCXvB,aAAc,MDkBhB,SCfA,SDgBI,eAIH,ICfD,eDgBA,YAGA,qBCXA,kBDYA,iBAAA,YAQA,qBChBA,qBDkBQ,YCfN,QAAS,EDkBX,YAAW,kBAGX,eACA,SAAW,KAGX,OCbA,aDcI,QAAS,ECVb,KAGA,aADA,aADA,yBAGA,6BACE,ODUM,QAbR,QAAK,EACL,YAAW,KACX,SAAM,SACN,WAAW,IE5FN,YF6FL,MAAK,QCOL,WACE,WDCgB,KCOlB,iBAFA,kBACA,mBAFA,qBAFA,gBACA,iBAKA,iBACA,SDrBA,QAAK,MACL,MAAK,KACL,QAAK,EACL,WAAW,IE3FN,YDyHL,4CAFA,6CACA,8CAFA,gDAFA,2CACA,4CAKA,4CACA,oCD9BA,QAAK,ECuCL,mCAFA,oCACA,qCAFA,uCAFA,kCACA,mCAKA,mCACA,2BD3CA,QAAK,ECoDL,kCAFA,mCACA,oCAFA,sCAFA,iCACA,kCD7BA,kCCmCA,0BDjCI,QAAQ,EAUZ,uCC8BA,wCD/BA,yCC8BA,2CDlCA,sCACA,uCAKA,uCCiCA,+BD/BI,QAAA,EAWJ,uBC2BA,wBACA,yBDjCA,2BAFA,sBACA,uBCoCA,uBACA,eD5BA,QACK,EAgBL,0BC0BA,2BALA,2BD1BA,4BC4BA,4BACA,6BDhCA,8BC4BA,+BALA,yBDhCA,0BCkCA,0BACA,2BASA,0BACA,2BDxBA,kBC0BA,mBACE,QAAS,EAGX,SDtBA,MAAA,KAEQ,OAAO,KACP,QAAQ,EC0BhB,8CADA,8CDpBQ,mBAAU,KAIlB,mBCuBA,yBADA,yBDnBA,WAAS,KACL,gBAAS,UCwBb,8BAEA,wCACA,+BAFA,8BDlBI,WAAQ,KCwBZ,4BDhCA,QAAQ,KAiBR,wBCmBA,gBDlBI,QAAQ,SCuBZ,uBACE,QAAS,eAGX,KACE,QAAS,MAGX,uDACE,QAAS,YAGX,aACE,MAAO,eACP,QAAS,YAGX,mCACE,QAAS,gBAGX,QACE,YAAa,OAGf,uBACE,QAAS,GACT,SAAU,SACV,IAAK,EACL,MAAO,EACP,OAAQ,EACR,KAAM,EACN,QAAS,EACT,eAAgB,KAGlB,eACE,mBAGF,SACE,QAAS,gBACT,iBAAkB,eAClB,WAAY,QAAQ,IAAK,YAAa,WAAW,IAAK,YACtD,QAAS,EACT,WAAY,OACZ,SAAU,MACV,IAAK,EACL,MAAO,EACP,OAAQ,EACR,KAAM,EACN,QAAS,KAGX,iBACE,QAAS,EACT,WAAY,QAGd,+BACE,SAAU","file":"../base--reset.css","sourcesContent":["@import \"../helpers/_helpers\";\n\n*,\n*:before,\n*:after {\n    box-sizing: inherit;\n}\nhtml {\n    font-size: 100%;\n    scroll-behavior: smooth;\n    box-sizing: border-box;\n}\nbody {\n    text-rendering: optimizeLegibility;\n    margin: 0;\n    padding: 0;\n    min-height: 100vh;\n    min-width: 360px;\n    //overflow-x: hidden;\n}\npre {\n    white-space: pre-line;\n}\n.clear {\n    clear: both;\n}\na {\n    outline: 0;\n    &:active {\n        outline: 0;\n    }\n    &:focus {\n        outline: none;\n    }\n}\nol,\nul {\n    li {\n        @include first(1) {\n            margin-top: 0;\n        }\n        @include last(1) {\n            margin-bottom: 0;\n        }\n    }\n}\nul {\n    li {\n        list-style: none;\n        position: relative;\n    }\n}\nimg {\n    max-width: 100%;\n    height: auto;\n}\nhr {\n    border: none;\n    width: 100%;\n}\ntable {\n    width: 100%;\n    border-collapse: collapse;\n    border-style: solid;\n    th,\n    td {\n        vertical-align: top;\n    }\n}\n.table-nostyle {\n    border: none;\n    thead {\n        background-color: transparent;\n    }\n    tr {\n        background-color: transparent;\n        th, td {\n            border: none;\n            padding: 0;\n            line-height: inherit !important;\n        }\n    }\n}\n.table-wrapper {\n    overflow: auto;\n}\nbutton {\n    outline: 0;\n    &:focus {\n        outline: none;\n    }\n}\n.btn,\n.to-basket .form-actions,\n.form-submit,\n.edit-submit,\n.ui-dialog-buttonpane button {\n    cursor: pointer;\n    outline: none;\n    user-select: none;\n    position: relative;\n    transition: all 0.2s ease-in-out;\n    color: inherit;\n}\n.btn {\n    &:focus {\n        box-shadow: none;\n    }\n}\ninput[type=\"tel\"],\ninput[type=\"text\"],\ninput[type=\"password\"],\ninput[type=\"email\"],\ninput[type=\"number\"],\ninput[type=\"date\"],\ninput[type=\"time\"],\ntextarea {\n    display: block;\n    width: 100%;\n    outline: none;\n    transition: all 0.3s ease-in-out;\n    @include placeholder() {\n        opacity: 1;\n    }\n    &:focus {\n        outline: 0;\n    }\n    &:disabled,\n    &[readonly] {\n        opacity: 1;\n    }\n}\ntextarea {\n    width: 100%;\n    resize: none;\n    outline: none;\n}\n\n// скрываем дефолтные стрелки у поля\ninput[type=\"number\"]::-webkit-outer-spin-button,\ninput[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none; // Yeah, yeah everybody write about it\n}\ninput[type='number'],\ninput[type=\"number\"]:hover,\ninput[type=\"number\"]:focus {\n    appearance: none;\n    -moz-appearance: textfield;\n}\n\ninput[type=\"date\"],\ninput[type=\"time\"],\ninput[type=\"datetime-local\"],\ninput[type=\"month\"] {\n    &.form-control {\n        appearance: none; // Fix appearance for date inputs in Safari\n    }\n}\n.webform-confirmation__back {\n    display: none;\n}\nform {\n    [style=\"\"],\n    [id^=\"ajax-wrapper\"] {\n        display: contents;\n    }\n    .ajax-new-content {\n        display: none !important;\n    }\n}\n.iti {\n    display: block;\n}\n.select2-container--default {\n    .select2-selection--single {\n        outline: none !important;\n    }\n}\n.sfi-wrapper {\n    width: 100% !important;\n    outline: none !important;\n}\n.imce-upload-form {\n    input[type=\"file\"] {\n        display: block !important;\n    }\n}\n.rouble {\n    font-family: Rouble;\n}\n.stretched-link {\n    &::after {\n        content: \"\";\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        z-index: 1;\n        pointer-events: auto;\n    }\n}\na.lightgallery {\n    border-bottom: none;\n}\n.overlay {\n    display: block !important;\n    background-color: rgba(0, 0, 0, 0.6);\n    transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;\n    opacity: 0;\n    visibility: hidden;\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 1000;\n    &.is-open {\n        opacity: 1;\n        visibility: visible;\n    }\n}\n.dialog-off-canvas-main-canvas {\n    overflow: clip;\n}\n",null,"@mixin font-mixin ($family, $map) {\r\n    $main-path: \"../fonts/\";\r\n    $dir-name: $family;\r\n    @each $weight, $path in $map {\r\n        @font-face {\r\n            font-display: swap;\r\n            font-family: $family;\r\n            src: url(\"#{$main-path + $dir-name + $path}.eot\");\r\n            src: url(\"#{$main-path + $dir-name +  $path}.eot?#iefix\") format(\"embedded-opentype\"),\r\n            url(\"#{$main-path + $dir-name + $path}.woff\") format(\"woff\"),\r\n            url(\"#{$main-path + $dir-name + $path}.ttf\")  format(\"truetype\"),\r\n            url(\"#{$main-path + $dir-name + $path}.svg##{$family}\")  format(\"svg\");\r\n            font-style: normal;\r\n            font-weight: $weight;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin placeholder() {\r\n    &::-webkit-input-placeholder {@content;}\r\n    &::-moz-placeholder {@content;}\r\n    &:-moz-placeholder {@content;}\r\n    &:-ms-input-placeholder {@content;}\r\n}\r\n\r\n@mixin fontAwesome($code: \"\", $size: inherit, $weight: 100) {\r\n    content: $code;\r\n    font-family: \"Font Awesome 5 Pro\";\r\n    font-size: $size;\r\n    font-weight: $weight;\r\n    line-height: 1;\r\n}\r\n\r\n@mixin icomoon($code: \"\", $size: inherit, $weight: 100) {\r\n    content: $code;\r\n    font-family: \"icomoon\";\r\n    font-size: $size;\r\n    font-weight: $weight;\r\n    line-height: 1;\r\n}\r\n\r\n// REM CONVERT\r\n$rem-baseline: 16px !default;\r\n$rem-fallback: false !default;\r\n$rem-px-only: false !default;\r\n\r\n@function rem-separator($list, $separator: false) {\r\n    @if $separator == \"comma\" or $separator == \"space\" {\r\n        @return append($list, null, $separator);\r\n    }\r\n\r\n    @if function-exists(\"list-separator\") == true {\r\n        @return list-separator($list);\r\n    }\r\n\r\n    // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\r\n    $test-list: ();\r\n    @each $item in $list {\r\n        $test-list: append($test-list, $item, space);\r\n    }\r\n\r\n    @return if($test-list == $list, space, comma);\r\n}\r\n\r\n@mixin rem-baseline($zoom: 100%) {\r\n    font-size: $zoom / 16px * $rem-baseline;\r\n}\r\n\r\n@function rem-convert($to, $values...) {\r\n    $result: ();\r\n    $separator: rem-separator($values);\r\n\r\n    @each $value in $values {\r\n        @if type-of($value) == \"number\" and unit($value) == \"rem\" and $to == \"px\" {\r\n            $result: append($result, $value / 1rem * $rem-baseline, $separator);\r\n        } @else if type-of($value) == \"number\" and unit($value) == \"px\" and $to == \"rem\" {\r\n            $result: append($result, $value / $rem-baseline * 1rem, $separator);\r\n        } @else if type-of($value) == \"list\" {\r\n            $value-separator: rem-separator($value);\r\n            $value: rem-convert($to, $value...);\r\n            $value: rem-separator($value, $value-separator);\r\n            $result: append($result, $value, $separator);\r\n        } @else {\r\n            $result: append($result, $value, $separator);\r\n        }\r\n    }\r\n\r\n    @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n\r\n@function rem($values...) {\r\n    @if $rem-px-only {\r\n        @return rem-convert(px, $values...);\r\n    } @else {\r\n        @return rem-convert(rem, $values...);\r\n    }\r\n}\r\n\r\n@mixin rem($properties, $values...) {\r\n    @if type-of($properties) == \"map\" {\r\n        @each $property in map-keys($properties) {\r\n            @include rem($property, map-get($properties, $property));\r\n        }\r\n    } @else {\r\n        @each $property in $properties {\r\n            @if $rem-fallback or $rem-px-only {\r\n                #{$property}: rem-convert(px, $values...);\r\n            }\r\n            @if not $rem-px-only {\r\n                #{$property}: rem-convert(rem, $values...);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// EM CONVERT\r\n// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\r\n@function em-separator($list) {\r\n    @if function-exists(\"list-separator\") == true {\r\n        @return list-separator($list);\r\n    }\r\n\r\n    $test-list: ();\r\n    @each $item in $list {\r\n        $test-list: append($test-list, $item, space);\r\n    }\r\n\r\n    @return if($test-list == $list, space, comma);\r\n}\r\n@function em($values...) {\r\n    $context: nth($values, length($values));\r\n    $result: ();\r\n    $separator: em-separator($values);\r\n\r\n    @for $i from 1 through length($values) - 1 {\r\n        $value: nth($values, $i);\r\n        @if type-of($value) == \"number\" and unit($value) == \"px\" {\r\n            $result: append($result, $value / $context * 1em, $separator);\r\n        } @else if type-of($value) == \"list\" {\r\n            $result: append($result, em(append($value, $context)...), $separator);\r\n        } @else {\r\n            $result: append($result, $value, $separator);\r\n        }\r\n    }\r\n\r\n    @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n@mixin em($properties, $context) {\r\n    @each $property in map-keys($properties) {\r\n        #{$property}: em(append(map-get($properties, $property), $context)...);\r\n    }\r\n}"]}